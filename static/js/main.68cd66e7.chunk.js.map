{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","loading","setLoading","useEffect","setTimeout","className","alt","src","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAsGeA,MA1Ef,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,oBAAS,GAAzC,mBACA,GADA,UACwCA,mBAAS,IAAjD,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAsBA,OAtBA,UAEAG,qBAAU,WACRC,YAAW,WACTF,GAAW,KACV,QAiBED,EACL,yBAAKI,UAAU,6CACb,yBACEC,IAAI,UACJD,UAAU,cACVE,IAAG,UAAKC,GAAL,yBAIP,yBAAKH,UAAU,yCACb,yBAAKA,UAAU,eACb,yBACEC,IAAI,OACJD,UAAU,mBACVE,IAAG,UAAKC,GAAL,qBCxDOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.68cd66e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './style.scss';\n\nconst menus = [\n  {\n    title: '15 Mini Mads',\n    description: 'lightly sweet and fluffy vanilla mini madeleines',\n  },\n  {\n    title: '15 Mini Pandan Mads',\n    description: 'lightly sweet and fluffy pandan mini madeleines',\n  },\n  {\n    title: '15 Mini Coffee Mads',\n    description: 'fragrant coffee flavor but same fluffiness',\n  },\n  {\n    title: '5 Dark Cookies',\n    description:\n      'a little crispy on the outside and chewy on the inside dark chocolate chip cookies',\n  },\n  {\n    title: '5 Milk Cookies',\n    description:\n      'a little crispy on the outside and chewy on the inside milk chocolate chip cookies',\n  },\n];\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [showForm, setShowForm] = useState(false);\n  const [cookiesClick, setCookiesClick] = useState(0);\n  const [form, setForm] = useState({});\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 4000);\n  });\n\n  const handleFormChange = (event) => {\n    const newFormEntry = JSON.parse(JSON.stringify(form));\n    const { id, value } = event.target;\n    newFormEntry[id] = value;\n    setForm(newFormEntry);\n  };\n\n  const handleResetOrder = () => {\n    setTimeout(() => {\n      setShowForm(false);\n      setForm({});\n    });\n  };\n\n  return loading ? (\n    <div className=\"loader animate__animated animate__fadeOut\">\n      <img\n        alt=\"loading\"\n        className=\"loader-spin\"\n        src={`${process.env.PUBLIC_URL}/jett-valorant.gif`}\n      />\n    </div>\n  ) : (\n    <div className=\"app animate__animated animate__fadeIn\">\n      <div className=\"app-section\">\n        <img\n          alt=\"logo\"\n          className=\"app-section-logo\"\n          src={`${process.env.PUBLIC_URL}/yazmyn.jpeg`}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction EasterEgg({ click = 0 }) {\n  let message = '';\n\n  if (click > 60) {\n    message =\n      'Fine, now post your finding with #baekerFindCookies on your instagram! :)';\n  } else if (click > 50) {\n    message = 'Why are you still clicking this?';\n  } else if (click > 30) {\n    message = 'Fine.. you have found the easter egg!';\n  } else if (click > 20) {\n    message = \"Wow, you love cookies, don't  you!?\";\n  } else if (click > 10) {\n    message = 'Seems like you like cookies a lot!';\n  } else {\n    message = '';\n  }\n\n  return (\n    <div\n      className=\"app-easteregg animate__animated animate__bounceIn\"\n      key={message}>\n      {message}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}